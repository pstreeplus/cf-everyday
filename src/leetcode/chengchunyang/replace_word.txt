class Solution {
public:
    class TrieNode{
    public:
        bool isWord;
        TrieNode* child[26];
        TrieNode(): isWord(false) {
            for (auto &a : child) a = NULL;
        }
    };
    void insert(TrieNode* node, string word){
        for(char c: word){
            if(!node->child[c-'a']){
                node->child[c - 'a'] = new TrieNode();
            }
            node = node->child[c-'a'];
        }
        node->isWord = true;
    }
    string findPrefix(TrieNode* node, string word){
        string cur = "";
        for(char c: word){
            if(!node->child[c-'a']) break;
            cur.push_back(c);
            node = node->child[c-'a'];
            if(node->isWord) return cur;
            
        }
        return word; 
    }
    string replaceWords(vector<string>& dict, string sentence) {
        string res = "";
        string temp = "";
        TrieNode* root = new TrieNode();
        for(string s:dict){
            insert(root, s);
        }
        istringstream is(sentence);
        while(is>>temp){
            if(!res.empty()) res += " ";
            res += findPrefix(root, temp);
        }
        return res;
        
    }
};