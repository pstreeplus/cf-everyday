
class MapSum {
    class TrieNode{
    public:
        TrieNode* children[26];
        int end;
        TrieNode(){
            for(int i = 0; i < 26; i++){
                children[i] = nullptr;
            }
            end = 0;
        }
    };
public:
    /** Initialize your data structure here. */
    TrieNode* root;
    MapSum() {
        root = new TrieNode();
    }
    
    void insert(string key, int val) {
        if(key.size() == 0) return;
        TrieNode* p = root;
        for(int i = 0; i < key.size(); i++){
            int x = key[i] - 'a';
            if(p->children[x] == nullptr){
                p->children[x] = new TrieNode();
                p = p->children[x];
            }
            else{
                p = p->children[x];
            }
        }
        p->end = val;
    }
    
    int sum(string prefix) {
        TrieNode* p = root;
        int sum = 0;
        for(int i = 0; i < prefix.size(); i++){
            int x = prefix[i] - 'a';
            if(p->children[x] != nullptr){
                p = p->children[x];
            }
            else{
                return false;
            }
        }
        dfs(p, sum);
        return sum;
    }
    
    void dfs(TrieNode* p, int& sum){
        sum += p->end;
        for(int i = 0; i < 26; i++){
            if(p->children[i] != nullptr){
                dfs(p->children[i], sum);
            }
        }
        
    }
      
};

/**
 * Your MapSum object will be instantiated and called as such:
 * MapSum obj = new MapSum();
 * obj.insert(key,val);
 * int param_2 = obj.sum(prefix);
 */